// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Sys = require("bs-platform/lib/js/sys.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_sys = require("bs-platform/lib/js/caml_sys.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");

var args = $$Array.sub(Sys.argv, 1, Sys.argv.length - 1 | 0);

function startWithDash(string) {
  return $$String.contains(string, /* "-" */45);
}

function startWithoutDash(string) {
  return !$$String.contains(string, /* "-" */45);
}

function arrGet(index, arr) {
  return Caml_array.caml_array_get(arr, index);
}

var flags = $$Array.of_list(List.filter(startWithDash)($$Array.to_list(args)));

var fileNames = $$Array.of_list(List.filter(startWithoutDash)($$Array.to_list(args)));

var fileName = Caml_array.caml_array_get(fileNames, 0);

var outFileName = Caml_array.caml_array_get(fileNames, 1);

var jsCommand = "bsc -pp \"refmt --print ml\" -c -impl " + (fileName + (" -o " + outFileName));

var byteCommand = "ocamlc str.cma -verbose -pp \"refmt --print binary\" -o  ./" + (outFileName + (" -impl " + fileName));

var nativeCommand = "ocamlopt str.cma -verbose -pp \"refmt --print binary\" -o  ./" + (outFileName + (" -impl " + fileName));

function performFlagOperation(flag) {
  var commandOps;
  switch (flag) {
    case "-bytecode" : 
        commandOps = /* tuple */[
          byteCommand,
          "bytecode"
        ];
        break;
    case "-js" : 
        commandOps = /* tuple */[
          jsCommand,
          "javascript"
        ];
        break;
    case "-native" : 
        commandOps = /* tuple */[
          nativeCommand,
          "native"
        ];
        break;
    default:
      commandOps = /* tuple */[
        "empty",
        "empty"
      ];
  }
  Caml_sys.caml_sys_system_command(commandOps[0]);
  Caml_sys.caml_sys_system_command("rm *.cm*");
  console.log("Compiled " + (fileName + (" to: " + (commandOps[1] + ("; name: " + outFileName)))));
  return /* () */0;
}

performFlagOperation(Caml_array.caml_array_get(flags, 0));

exports.args = args;
exports.startWithDash = startWithDash;
exports.startWithoutDash = startWithoutDash;
exports.arrGet = arrGet;
exports.flags = flags;
exports.fileNames = fileNames;
exports.fileName = fileName;
exports.outFileName = outFileName;
exports.jsCommand = jsCommand;
exports.byteCommand = byteCommand;
exports.nativeCommand = nativeCommand;
exports.performFlagOperation = performFlagOperation;
/* args Not a pure module */
